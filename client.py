from pyrogram import Client, errors
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message
import time
import random
from dotenv import load_dotenv
import os
import sqlite3 as sq
from datetime import datetime


# —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with sq.connect('tg_ex.db') as con:
    cur = con.cursor()

    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        date datetime,
        count_id int
        )""")

def update_base(date: int):    #–∑–∞–Ω–æ—Å–∏—Ç –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑—É
    with sq.connect('tg_ex.db') as con:
        cur = con.cursor()

        data = datetime.now()
        count = date

        sql = "INSERT INTO users VALUES (?, ?)"
        cur.execute(sql, (data, count))

def time_wait(sec):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –° –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤—ã–≤–æ–¥–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    print(f'–û–∂–∏–¥–∞–Ω–∏–µ={sec}—Å–µ–∫')
    for num in range(sec, 0, -5):
        print(f'–û—Å—Ç–∞–ª–æ—Å—å {num} —Å–µ–∫, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {datetime.now()}')
        time.sleep(sec-num)
    # time.sleep(sec)



# –í—Å—Ç–∞–≤–ª—è–µ–º api_id –∏ api_hash
load_dotenv()
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')

client = Client(name='me_client', api_id=api_id, api_hash=api_hash)

def get_greeting(num:int):
    if isinstance(num, int) and 0<num<6:
        greet_dict = {
            1: ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüòä', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüòä'),
            2: ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüëã', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã'),
            3: ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚úåÔ∏è', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é‚úåÔ∏è'),
            4: ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', '–î–æ–±—Ä—ã–π –¥–µ–Ω—åüòä'),
            5: ('–î–æ–±—Ä—ã–π –¥–µ–Ω—åüëã', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å‚úåÔ∏è'),
        }
        return greet_dict[num]
    return '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è'
@client.on_message()  # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def all_message(client: Client, message: Message):
    text = message.text.split('\n')
    mi_list = []
    tu_table_list = []
    check_greet = True

    if text[0] in ['1', '2', '3', '4', '5']:
        message.reply(get_greeting(int(text[0]))[0])
        message.reply(get_greeting(int(text[0]))[1])

    else:
        for i in text:
            time.sleep(random.uniform(0.4, 2.3))  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                # print(len(mi_list)+1, f'"{client.get_users(i).__getattribute__("username")}"',
                #       client.get_users(i).__getattribute__('id'))
                print(len(mi_list) + 1, client.get_users(i).username, client.get_users(i).id)
                # print(dir(client.get_users(i)))
            except errors.exceptions.bad_request_400.UsernameNotOccupied as ex:
                print(ex.MESSAGE, ex.CODE)
            except errors.exceptions.bad_request_400.UsernameInvalid as ex:
                print(ex.MESSAGE, ex.CODE)
            except Exception as ex:
                print(ex)
                if ex.value:
                    time_wait(ex.value)



            try:
                client.get_users(i)
                mi_list.append(i)
                tu_table_list.append(i)
            except Exception:
                tu_table_list.append('–Ω–µ—Ç')
            if len(mi_list) == 21:
                break

        if len(mi_list) > 0 and check_greet==True:
            message.reply('\n'.join(mi_list))
            if len(mi_list) != len(tu_table_list):
                message.reply('\n'.join(tu_table_list))
            message.reply(f'–ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫{len(mi_list)}, –≤—Ç–æ—Ä–æ–π{len(tu_table_list)}')
            update_base(len(tu_table_list))
        else:
            print('—Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç')
            message.reply('—Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç')
        # message.reply(client.get_users('@al2151'))


client.run()
